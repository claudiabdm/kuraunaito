---
import { Photo } from "astro-carousel";
import { getSize } from "../utils/functions";

interface Props {
    photos: Record<string, string>;
}
const { photos } = Astro.props;
---

<script>
    export class AstroPhotoStack extends HTMLElement {
        lastTarget: string = null;

        constructor() {
            super();
            this._init();
        }

        _init() {
            const photos = [...(this.children ?? [])].reduce<
                Record<string, HTMLElement>
            >((acc, curr) => {
                if (curr instanceof HTMLElement) {
                    acc[curr.dataset.photoStackPath] = curr;
                }
                return acc;
            }, {});

            const entryLinks = Object.keys(photos).map((path) =>
                document.querySelector<HTMLElement>(
                    `[data-photo-stack-path-target="${path}"]`,
                ),
            );

            if (entryLinks) {
                for (const elem of entryLinks) {
                    this._addEventListeners(elem, photos);
                }
            }
        }

        _addEventListeners(
            elem: HTMLElement,
            photos: Record<string, HTMLElement>,
        ) {
            elem.addEventListener("mouseenter", _handleToggleClassShow);
            elem.addEventListener("mouseleave", _handleToggleClassShow);

            function _handleToggleClassShow(e: MouseEvent) {
                if (e.target instanceof HTMLElement) {
                    const pathTarget = e.target.dataset.photoStackPathTarget;
                    const photoElem = photos[pathTarget];
                    const animations = photoElem.getAnimations();
                    if (e.type === "mouseenter") {
                        photoElem.classList.add("photo-stack__elem--up");
                        photoElem.classList.add("photo-stack__elem--show");
                        Object.entries(photos).forEach(([_, el]) => {
                            if (el !== photoElem) {
                                el.classList.remove("photo-stack__elem--up");
                            }
                        });
                    }
                    if (e.type === "mouseleave") {
                        if (animations.length < 1) {
                            photoElem.classList.remove(
                                "photo-stack__elem--show",
                            );
                        } else {
                            animations.forEach((a) => {
                                a.onfinish = function finish() {
                                    photoElem.classList.remove(
                                        "photo-stack__elem--show",
                                    );
                                };
                            });
                        }
                    }
                }
            }
        }
    }

    customElements.define("astro-photo-stack", AstroPhotoStack);
</script>

<astro-photo-stack
    class="photo-stack"
    data-photo-stack-photos={JSON.stringify(photos)}
>
    {
        Object.entries(photos).map(
            ([path, filename], index, arr) =>
                path && (
                    <div
                        class="photo-stack__elem"
                        data-photo-stack-path={path}
                    >
                        <Photo
                            src={filename}
                            width={getSize(filename).width}
                            height={getSize(filename).height}
                            alt=""
                            widths={[360, 520]}
                            loading={index < arr.length - 5 ? "lazy" : "eager"}
                            aspectRatio={
                                getSize(filename).width /
                                getSize(filename).height
                            }
                            quality={70}
                            classWrapper="photo-stack__frame"
                        />
                    </div>
                ),
        )
    }
</astro-photo-stack>

<style lang="scss" define:vars={{ numOfPhotos: photos.length }}>
    @use "sass:math";
    .photo-stack {
        position: relative;
        display: grid;
        grid-template-columns: 0.85fr;
        grid-template-rows: auto;
        justify-content: center;
        align-items: start;
        aspect-ratio: 1 / 1;
        margin-top: var(--space-xl);

        @media screen and (min-width: 732px) {
            grid-template-columns: 0.8fr;
            justify-content: end;
            align-content: space-between;
            align-items: center;
            max-width: 100%;
            min-width: 100%;
            min-height: 90%;
            margin-bottom: 0;
            margin-top: 0;
        }
        &__elem {
            width: 100%;
            height: fit-content;
            min-height: auto;
            grid-row: 1;
            grid-column: 1;
            background-color: #fff;
            box-shadow: 0 0 8px 2px rgb(202, 202, 202, 0.25);
            transition: transform 0.5s cubic-bezier(0.36, 0.07, 0.25, 1);

            $numOfPhotos: var(--numOfPhotos);
            $rotateInitial: rotate(0);
            $rotate: rotate(0);
            $translateInitial: translate3d(0, 0, 0);
            $translate: translate3d(0, 0, 0);

            @for $i from 1 through str-length($numOfPhotos) {
                @if $i % 2 == 0 {
                    $rotateInitial: rotate(#{$i + math.random()}deg);
                    $rotate: rotate(-#{0.5 * $i + math.random()}deg);
                    $translateInitial: translate3d(
                        -#{1% + ($i + math.random())},
                        #{2% + ($i + math.random())},
                        0
                    );
                } @else {
                    $rotateInitial: rotate(-#{$i + math.random()}deg);
                    $rotate: rotate(#{0.5 * $i + math.random()}deg);
                    $translateInitial: translate3d(
                        #{1% + ($i + math.random())},
                        -#{2% - ($i + math.random())},
                        0
                    );
                }

                &:nth-child(#{$i}) {
                    transform: #{$translate} #{$rotate};
                }

                &--up:nth-child(#{$i}) {
                    z-index: 1;
                }
                &--show:nth-child(#{$i}) {
                    transform: translate3d(0, -20%, 0) rotate(0);
                    transition: 0.35s cubic-bezier(0.36, 0.07, 0.25, 1);
                    transition-property: transform, opacity;

                    @media screen and (min-width: 732px) {
                        transform: translate3d(-30%, -#{10% - ($i * 0.5)}, 0)
                            rotate(0);
                    }
                }
            }
        }

        :global(.photo-stack__frame) {
            border: 4px solid #fff;
        }
    }
</style>
