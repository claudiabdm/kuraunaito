---
import { t } from "i18next";
import { getStoryLocalizedPath, getStories, getSize } from "../utils/functions";
import { getDate } from "../utils/functions";
import Breadcrumbs from "./Breadcrumbs.astro";
import Link from "./Link.astro";
import { Photo } from "astro-carousel";

const { blok } = Astro.props;
const { path } = Astro.params;
const slug = blok.slug || Astro.props.slug;

const {
  data: { stories },
} = await getStories({ params: `starts_with=${slug}` });

// Display stories and folders that are in current folder
const root = stories.find((s) => slug.includes(s.slug));
const level = root?.full_slug.split("/").length - 1;
const storiesInRoot = stories
  .filter(
    (story) =>
      story !== root &&
      story.full_slug.split("/").filter((s) => s).length === level + 1,
  )
  .sort(
    (a, b) =>
      new Date(b.content.from || new Date()).getTime() -
      new Date(a.content.from || new Date()).getTime(),
  )
  .map((story) => ({
    ...story,
    ...getStoryLocalizedPath(story, path),
  }));

// Add see more if limit is set
const maxItems = Math.min(Number(blok.maxItems), storiesInRoot.length);
const withLimit = maxItems && !isNaN(maxItems);
if (withLimit) {
  if (storiesInRoot.length > 1) {
    storiesInRoot.splice(maxItems);
  }
  storiesInRoot.push({
    ...root,
    ...getStoryLocalizedPath(root, path),
    name: t("see-more"),
  });
}

const defaultImage = blok.defaultImage.filename ? blok.defaultImage : null;
const breadcrumbs = blok.withHome
  ? Astro.props.breadcrumbs
  : [getStoryLocalizedPath(root)];
---

<div class:list={["container", { "container--cols": Boolean(defaultImage) }]}>
  <section class="container__nav">
    <Breadcrumbs breadcrumbs={breadcrumbs} />

    <ul class:list={["linkList", { "linkList--limit": withLimit }]}>
      {
        storiesInRoot.map((s, i) => (
          <li class="linkList__elem">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="25"
              height="50"
              viewBox="0 0 25 50"
              fill="none"
              stroke="var(--secondary)"
              stroke-width="1.5"
            >
              <line
                x1="1"
                y1="25"
                x2="25"
                y2="25"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <line
                x1="1"
                y1="1"
                x2="1"
                y2={i < storiesInRoot.length - 1 ? 50 : 25}
              />
            </svg>
            <Link
              href={`/${s.path}`}
              ellipsis={true}
            >
              <div class="linkList__name">{t(s.name)}</div>
              {t(s.name) != t("see-more") && (
                <div class="linkList__date">
                  {getDate(s.content.from, s.content.to)}
                </div>
              )}
            </Link>
          </li>
        ))
      }
    </ul>
  </section>

  {
    defaultImage && (
      <Photo
        src={defaultImage.filename}
        width={getSize(defaultImage.filename).width}
        height={getSize(defaultImage.filename).height}
        alt={blok.defaultImage.alt ?? ""}
        widths={[360, 720]}
        loading="eager"
        class="container__photo"
      />
    )
  }
</div>

<style lang="scss">
  .container {
    &--cols {
      @media screen and (min-width: 732px) {
        display: grid;
        grid-template-columns: 0.75fr 1fr;
        justify-items: flex-end;
        gap: var(--space-3xl);
      }
    }
    &__nav {
      display: inline-block;
      justify-self: flex-start;
    }
  }

  .linkList {
    margin: 0;
    padding: 0;
    list-style: none;

    @media screen and (min-width: 732px) {
      height: var(--max-height);
      overflow: hidden;
      &:hover {
        overflow: auto;
      }

      &--limit:hover {
        overflow: hidden;
      }
    }

    &__elem {
      display: grid;
      grid-template-columns: auto 1fr;
      height: 48px;
      align-items: center;
      gap: 0 var(--space-3xs);
    }

    &__name:first-letter {
      text-transform: uppercase;
    }

    &__date {
      font-size: 0.75rem;
      color: var(--secondary);
      text-overflow: ellipsis;
      overflow: hidden;
      white-space: nowrap;
    }
  }
</style>
