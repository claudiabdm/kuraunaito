---
import i18next, { t } from "i18next";
import { useStoryblokApi } from "@storyblok/astro";
import { getStoriesLocalizedPath, getVersion } from "../utils/functions";
import Link from "./Link.astro";

const { path } = Astro.params;
const { slug = 'home' } = Astro.props;
const storyblokApi = useStoryblokApi();

// Get menu links from config file
const { data } = await storyblokApi.get(`cdn/stories/config`, {
  version: getVersion(),
});

// Get stories by ordered uuids
const {
  data: { stories },
} = await storyblokApi.get(
  `cdn/stories?by_uuids_ordered=${data.story.content.headerMenu}&language=${i18next.language}`,
  {
    version: getVersion(),
  }
);

// Formatted links
const rootSlug = slug.split("/")[0];
const links = getStoriesLocalizedPath(stories);
---

<header class="header">
  <nav class="nav">
    <!-- Home -->
    <h1 class="nav__home" translate="no">
      <Link href={`/${links[0].localizedSlug}`} first={true}>
          クラウナイト
      </Link>
    </h1>

    <!-- Pages -->
    {
      links?.slice(1).length > 1 && (
        <section class="nav__group">
          {links?.slice(1).map((l, i) => (
            <Link
              href={`/${l.localizedSlug}`}
              active={String(path).includes(l.localizedSlug.slice(0, -1))}
            >
              {l.name}
            </Link>
          ))}
        </section>
      )
    }

    <!-- Languages -->
    <section class="nav__group nav__group--lang" translate="no">
      <Link href={`/${slug}`} active={i18next.language !== "es"}>en</Link>
      <hr class="lang-divider" />
      <Link
        href={`/es/${slug.replace(rootSlug, t(rootSlug, { lng: "es" }))}`}
        active={i18next.language === "es"}>es</Link
      >
    </section>
  </nav>
</header>

<style lang="scss">
  .header {
    margin-bottom: var(--space-xl-2xl);
    text-transform: capitalize;
  }
  .nav {
    display: grid;
    gap: var(--space-l);
    grid-template-areas:
      "title lang"
      "nav nav";
    @media screen and (min-width: 732px) {
      grid-template-areas: "title nav lang";
      align-items: center;
      justify-items: center;
      gap: var(--space-xs-xl);
    }
    &__home {
      grid-area: title;
      justify-self: flex-start;
      font-weight: 700;
      white-space: nowrap;
    }

    &__group {
      grid-area: nav;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: var(--space-s-l);

      &--lang {
        grid-area: lang;
        justify-self: flex-end;
        gap: var(--space-s-m);
        font-weight: 700;
        text-transform: uppercase;
      }
    }
    .lang-divider {
      margin: 0;
      border: none;
      &::before {
        content: "|";
        color: var(--tertiary);
      }
    }
  }
</style>
