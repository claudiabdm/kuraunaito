---
import i18next, { t } from "i18next";
import { getStoriesLocalizedPath, getStories } from "../utils/functions";
import Link from "./Link.astro";
import { LANGUAGES } from "../utils/types";

const { path } = Astro.params;
const { slug } = Astro.props;

// Get menu links from config file
const {
  data: { story },
} = await getStories({ slug: "config" });

// Get stories by ordered uuids
const {
  data: { stories },
} = await getStories({
  params: `by_uuids_ordered=${story.content.headerMenu}`,
});

// Formatted links
function langPath(l) {
  let root = slug.split("/")[0];
  const slugLocalized = slug
    .replace(root, t(root, { lng: l }))
    .replace(t("home", { lng: l }), "");
  return l !== "en"
    ? `/${l}/${slugLocalized}`
    : `/${slugLocalized.replace("home", "")}`;
}
const links = getStoriesLocalizedPath(stories);
---

<header class="header">
  <nav class="nav">
    <!-- Home -->
    <h1
      class="nav__home"
      translate="no"
    >
      <Link
        href={`/${i18next.language == "es" ? "es" : ""}`}
        first={true}
      >
        クラウナイト
      </Link>
    </h1>

    <!-- Pages -->
    {
      links?.length > 1 && (
        <section class="nav__group">
          {links?.map((l) => (
            <Link
              href={`/${l.path.replace(t("home"), "")}`}
              inactive={!slug.includes(`${l.slug}`)}
            >
              {l.name}
            </Link>
          ))}
        </section>
      )
    }

    <!-- Languages -->
    <section
      class="nav__group nav__group--lang"
      translate="no"
    >
      {
        LANGUAGES.map((l, i, list) => (
          <>
            <Link
              href={langPath(l)}
              inactive={i18next.language !== l}
            >
              {l}
            </Link>
            {i < list.length - 1 && <hr class="lang-divider" />}
          </>
        ))
      }
    </section>
  </nav>
</header>

<style lang="scss">
  .header {
    margin-bottom: var(--space-l-xl);
    text-transform: capitalize;
  }
  .nav {
    display: grid;
    gap: var(--space-l);
    grid-template-areas:
      "title lang"
      "nav nav";
    justify-items: end;

    @media screen and (min-width: 732px) {
      grid-template-areas: "title nav lang";
      align-items: center;
      justify-items: center;
      gap: var(--space-xs-xl);
    }
    &__home {
      grid-area: title;
      justify-self: flex-start;
      font-weight: 700;
      white-space: nowrap;
    }

    &__group {
      grid-area: nav;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: var(--space-s-l);

      &--lang {
        grid-area: lang;
        justify-self: flex-end;
        gap: var(--space-s-m);
        font-weight: 700;
        text-transform: uppercase;
      }
    }
    .lang-divider {
      margin: 0;
      border: none;
      &::before {
        content: "|";
        color: var(--tertiary);
      }
    }
  }
</style>
