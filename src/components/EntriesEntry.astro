---
import { storyblokEditable } from "@storyblok/astro";
import { Carousel, Photo } from "astro-carousel";
import type { ComponentProps } from "astro/types";
import { getSize } from "../utils/functions";

const { blok } = Astro.props;
const { path } = Astro.params;

const images: ComponentProps<typeof Carousel>["images"] = (
  blok.entries ?? []
).map((img) => ({
  src: img.filename,
  alt: img.alt ?? "",
  width: getSize(img.filename).width,
  widths: [720, 1280, getSize(img.filename).width],
  height: getSize(img.filename).height,
  format: "webp",
}));
const imagesGrid = images.map((img, i) => ({
  ...img,
  widths: [360, 540, 720],
  loading: i < 3 ? "eager" : "lazy",
  "data-carousel-index": i,
}));
---

<script>
  import { animate, inView } from "motion";
  inView(
    ".entry__elem",
    ({ target }) => {
      animate(
        target,
        {
          opacity: 1,
          transform: ["translate3d(0, 5%, 0)", "translate3d(0, 0, 0)"],
        },
        { delay: 0.1, duration: 0.75, easing: [0.36, 0.07, 0.25, 1] },
      );
    },
    {
      amount: 0.3,
    },
  );
</script>

<Carousel images={images} />

<ul
  class="entry"
  {...storyblokEditable(blok)}
  id="carouselTargetList"
>
  {
    imagesGrid.map((img, i) => {
      return (
        <li class="entry__elem">
          <div class="entry__elem-hover">
            <a
              href={`/${path}?image=${i}`}
              data-carousel-index={i}
              class="entry__link"
              aria-label={`Open image ${img.title || i}`}
            >
              <Photo {...img} />
            </a>
          </div>
        </li>
      );
    })
  }
</ul>

<style lang="scss" define:vars={{ numOfPhotos: imagesGrid.length }} is:global>
  .entry {
    display: grid;
    gap: var(--space-s-m);
    padding-bottom: var(--space-s-m);
    display: grid;
    gap: var(--space-m);
    margin: var(--space-m) 0 0 0;
    padding: 0;
    list-style: none;
    @media screen and (min-width: 732px) {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      grid-auto-rows: var(--maxHeight);
      gap: var(--space-xl);
      align-items: center;
    }

    &__elem {
      opacity: 0;

      &-hover {
        border: 8px solid #fff;
        box-shadow: 0 0 20px 1px rgb(202, 202, 202, 0.25);
        transition: 0.25s cubic-bezier(0.36, 0.07, 0.25, 1);
        transition-property: transform, box-shadow;
        &:hover {
          cursor: pointer;
          box-shadow: 0 0 20px 1px rgb(202, 202, 202, 0.5);
          transform: translate3d(0, -2%, 0);
        }
      }
    }

    &__link {
      display: block;
    }
  }
</style>
